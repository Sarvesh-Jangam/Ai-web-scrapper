from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.prompts import PromptTemplate
import os
from dotenv import load_dotenv

load_dotenv()
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")

llm = ChatGoogleGenerativeAI(
    model="gemini-2.0-flash",
    google_api_key=GOOGLE_API_KEY,
    temperature=0.3
)

def enrich_exploit_with_ai(exploit):
    """
    Enrich exploit data with AI-generated description
    """
    # Check if already has type from API
    exploit_type = exploit.get('type', 'Unknown')
    
    # Determine severity based on type and title
    title_lower = exploit.get('title', '').lower()
    
    if exploit_type.lower() in ['remote', 'webapps'] or any(word in title_lower for word in ['rce', 'remote code execution']):
        severity = 'CRITICAL'
    elif 'local' in exploit_type.lower() or 'privilege escalation' in title_lower:
        severity = 'HIGH'
    elif 'dos' in exploit_type.lower():
        severity = 'MEDIUM'
    else:
        severity = 'UNKNOWN'
    
    exploit['severity'] = severity
    
    # Generate description with AI if needed
    if not exploit.get('description'):
        prompt = f"""Briefly explain this exploit in 2 sentences:
Title: {exploit.get('title')}
Type: {exploit_type}
Platform: {exploit.get('platform')}"""
        
        try:
            response = llm.invoke(prompt)
            exploit['description'] = response.content.strip()
        except:
            exploit['description'] = f"{exploit_type} exploit affecting {exploit.get('platform')} systems."
    
    return exploit